- Move dynamically generated navigation items without first editing and saving to concrete link
- Restrict access to view admin menu and perhaps separate links within admin menu itself
- Apply permissions to navigation links
- Integrate role based permissions into permission layer.
- Make it possible to sort dynamic fields that are arrays.
- Make it possible to add more dynamic fields to arrays preferable without reliance on JavaScript
- Implement configuration permission plugin
- Create UI to manage permissions
- Add validation handling to dynamic fields
- Create global diaolog, system messages for providing feedback to users when carrying out actions regarding
  success, failure or warnings that occurred or prevented something from happening.
- Develop algoritm to generate views and associated UI
- Rename VD to View
- Create cache layer for expensive, repetitive and recursive data access tasks such as; building
  vocabulary, menu, getting entity dybamic fields, etc.
- Create term management area similiar to navigation area for managing tree structure.
- Re-design navigation area breadcrumb system, its a bit awkward
- make sure view algorithm ignores deleted items automatically with tables supoorting soft delete
- account for default field values with view SQL builder algorithm
- DONE: add short-cut/magical type to assign field to system entities such as; site, user, node of type x
  ,node type, term of vocabulary x, vocabulary, etc. This can be done with the DAO call but
  really it needs to be easy to do though the DAO can be used the back-end to derive the values
  still. perhaps just hide the DAO for now in user interface.
  - dao arg multi-dimensional numeric and associative support
  
  
  
  
  - keep dynamic links simple
    - can't edit via admin
    - can't sort
    - This will solve the majority of issues
    - leave developers responsibility to do sorting, customization programmtaically



----------------------------------------------------------------------------------------


00001: Complete administrative UI to manage views
- Form has been partially created but there is much to be done. Views themselves are stable if the data
  is entered via the db manually. Just nothing exist to create views via the admin UI.

00002: administrative UI to manage permissions and assigning roles to users.
- Not much work has been done here. There is only a basic static form that shows the intended
  work flow. Nothing actually functions though.

00003: Implement cache layer for finding entities by ID.
- There is a basic cache system set-up but it has all been commented out considering
  it requires an extra query to hit the DB to check for a serialized object.

00004: Create linked list and auto complete form widgets.
- Several forms will be dependent on at the very least a linked list. The linked list
  will be necessary for roles and views UI. Though I tend to think that both of these will
  not be able to use the default form Builder UI but we will see.

00004: Rebuild Taxonomy term list module/look. ----- COMPLETE
- Make it more like the new menu display. In which all terms are shown on a single page in a table with indenting.

00005: Implement and integrate configuration permission plugin.
- Right now configuration is not being protected by permissions layer. In the end it should be possible
  to look down specific configuration parameters to certain users.

00006: Determine better means of managing assets (JS and CSS) and possibly internal aggregation and minification support.
- Right now CSS and JS are merely embedded in templates. However, there whould be a way for modules and templates
  to add files via method of the MCP facade or something.

COMPLETE 00007: When term is input as a view filter parameter match against all child terms as well.
- Right now when a term is used as a view filter the match is explicit to that term
  only not children. Therefore, given a store with a category structure a search for
  "socks" would only yield products directly associated with socks not those that
  are indirectly associated with socks via child terms such as; "dress socks" or "sports socks".

00009: Implement and integrate video fields
- Very little work has been here. Respective db schemas have been set-up and that is
  about all. The Video DAO needs to be implemented and than video fields need to integrated
  with form builder and Field DAO.

00010: Implement purge for all entities.
- Purge is the process of removing data from the database. When deleting entities nothing
  is ever removed the database merely flagged as hidden essentially. Normal users should
  only be able to delete. However, administrative users with the proper permissions should
  be able to purge the db of deleted data.

00011: Implement delete for all entities w/ dependencies properly handled.
- Some work has been done here though I am not able to recall exactly what. Though I am
  certain that delete does not work for most entities in the system. Perhaps nodes and that is
  all.

00012:
When terms, nodes or users are deleted delete any field references. This is probably
going to require a listener for when entities of a type get deleted and hand off
to the field dao so that is can clean-up any entity references. Unlike most things
field values will be deleted immediately rather than hidden.

00013:
Update user login module to use the form builder and follow pattern(s)
used to handle/process forms throughout the rest of the system. Also add
automatic login functionality. There is a check box but right now it doesn't
actually do anything.

00008 BUG
If no fields have been created for an entity the create fields button is not showing up. However, once
a single field is created the button properly shows up for those who have the proper permissions.


----------------------------------------------------------------------------

Top priority

- Implement delete
- Video support and field integration
- Implement purge
- Install Routine
     
  